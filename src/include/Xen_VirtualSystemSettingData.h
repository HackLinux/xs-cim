// ***** Generated by Codegen *****
// Copyright (C) 2008-2009 Citrix Systems Inc
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

#ifndef __XEN_VIRTUALSYSTEMSETTINGDATA_H__
#define __XEN_VIRTUALSYSTEMSETTINGDATA_H__

/* Values for the various properties of the class */
#define HVM_VM_TYPE "DMTF:Xen:HVM"
#define PV_VM_TYPE  "DMTF:Xen:PV"

typedef enum _Xen_VirtualSystemSettingData_AutomaticRecoveryAction{
    Xen_VirtualSystemSettingData_AutomaticRecoveryAction_None=2,
    Xen_VirtualSystemSettingData_AutomaticRecoveryAction_Restart=3,
    Xen_VirtualSystemSettingData_AutomaticRecoveryAction_Revert_to_snapshot=4,
    /*Xen_VirtualSystemSettingData_AutomaticRecoveryAction_DMTF_Reserved=..,*/
}Xen_VirtualSystemSettingData_AutomaticRecoveryAction;

typedef enum _Xen_VirtualSystemSettingData_AutomaticShutdownAction{
    Xen_VirtualSystemSettingData_AutomaticShutdownAction_Turn_Off=2,
    Xen_VirtualSystemSettingData_AutomaticShutdownAction_Save_state=3,
    Xen_VirtualSystemSettingData_AutomaticShutdownAction_Shutdown=4,
    /*Xen_VirtualSystemSettingData_AutomaticShutdownAction_DMTF_Reserved=..,*/
}Xen_VirtualSystemSettingData_AutomaticShutdownAction;

typedef enum _Xen_VirtualSystemSettingData_AutomaticStartupAction{
    Xen_VirtualSystemSettingData_AutomaticStartupAction_None=2,
    Xen_VirtualSystemSettingData_AutomaticStartupAction_Restart_if_previously_active=3,
    Xen_VirtualSystemSettingData_AutomaticStartupAction_Always_startup=4,
    /*Xen_VirtualSystemSettingData_AutomaticStartupAction_DMTF_Reserved=..,*/
}Xen_VirtualSystemSettingData_AutomaticStartupAction;

int vssd_to_vm_rec(
    const CMPIBroker* broker,
    CMPIInstance *vssd,
    xen_utils_session *session,
    bool strict_checks,
    xen_vm_record** vm_rec_out,
    CMPIStatus *status
    );

int vssd_find_vm(
    CMPIObjectPath *ref, 
    xen_utils_session *session,
    xen_vm* vm, 
    xen_vm_record **vm_rec, 
    CMPIStatus *status);

int vssd_from_vm_rec(
    const CMPIBroker* broker, 
    xen_utils_session *session, 
    CMPIInstance *inst, 
    xen_vm vm,
    xen_vm_record * vm_rec,
    bool ref_only
    );

int vssd_modify(
    xen_utils_session* pSession, 
    xen_vm vm_handle, 
    xen_vm_record *vm_rec,
    CMPIInstance *modified_inst, 
    const char **properties);

void vssd_create_instance_id(
    xen_utils_session *session,
    xen_vm_record *vm_rec, 
    char* buf, 
    int buf_len);

CMPIObjectPath* snapshot_create_ref(
    const CMPIBroker *broker, 
    const char *nameSpace,
    xen_utils_session *session,
    xen_vm_record *snapshot_rec);

CMPIObjectPath* vm_create_ref(
    const CMPIBroker *broker, 
    const char *nameSpace,
    xen_utils_session *session,
    xen_vm_record *vm_rec);

#endif /*__XEN_VIRTUALSYSTEMSETTINGDATA_H__*/
